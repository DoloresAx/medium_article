"Git? 🤔

-Git ဆိုတာ Open Source Distributed Version Control System (DVCS) တစ်ခုဘဲ ဖြစ်ပါတယ်။✨
နာမည်အတိုင်းဘဲ Project တွေ Code တွေရဲ့ အခြေအနေ အချိန်အလိုက် ပြောင်းလဲ သွားတဲ့အရာတွေကို Version အလိုက် Control လုပ်တဲ့ စနစ်ဘဲဖြစ်ပါတယ်.🛠️

-Distributed ဖြစ်တဲ့အတွက် စက်အချင်ချင်း peer to peer ချိတ်ဆတ်ပြီးတော့ project ရဲ့ Backup File ကလည်း စက်တိုင်းမှာရှိတယ်ဆိုပြီး ယူဆလို့ရပါတယ်။💻🔗🗃️

-တစ်ကယ်လို့ Developer ဟာ Code ကို မှားရေးမိလို့ဘဲဖြစ်ဖြစ် အပြောင်းအလဲ လုပ်လိုက်တာကို မကြိုက်လို့ Project ကို အရင် အတိုင်းဘဲ ပြန်ထားချင်တာဖြစ်ဖြစ် restore ပြန်လုပ်နိုင်အောင် Git ကို သုံးပြီး ပြင်ဆင်လို့ရပါတယ်။♻️🙌


Project တစ်ခုကို Developer 20 လောက် Git မသုံးဘဲ ဝိုင်းပြီးရေးတယ်လို့ စဉ်းစားကြည့်ရအောင်!!👥🧠

–Developer တွေက သူတို့ရဲ့ ရေးပြီးသွားတဲ့ Code တွေကို Server ဆီကို ပို့ရမယ်။ (ဒါမှမဟုတ်လည်း Memory Stick နဲ့ စက်တစ်လုံးနဲ့ တစ်လုံး ကူးနေရလိမ့်မယ်)📤📦

–ဒါ့အပြင် စက်ထဲမှာ Code အမှားကို နည်းနည်းလေး ပြင်တာမျိုး လုပ်ပြီးသွားရင် Server ဆီကို ထပ်ခါ ထပ်ခါ ပြန်ပို့နေရလိမ့်မယ်။🔁🛠️

–နောက်ပြီးတော့ Developer တွေအချင်းချင်းကြားမှာ Standalone ဖြစ်နေပြီး တစ်ယောက်ပြင်လိုက်တဲ့ Code ကို တစ်ယောက်က မသိဘဲ Communication မရှိဘူးဖြစ်နေလိမ့်မယ်။📴🤷‍♂️

–အပေါ်က အခြေအနေတွေ ပြဿနာတွေ ပြေလည်ဖို့အတွက် ပုံမှန် အနေနဲ့ ကျွန်တော်တို့ စဉ်းစာမိတာက ကျွန်တော်တို့ Document တွေရေးသလို ပထမဆုံး ရေးလိုက်တဲ့ document ကို v1 လို့သိမ်း v1 ကို copy ကူးပြီးနောက် ပြင်စရာရှိတာနည်းနည်းပြင်ပြီး v2,v3..final,lastfinal, final final သိမ်းရင် ကျွန်တော်တို့ လိုချင်တဲ့ timeline နဲ့ version အလိုက်တော့ရပေမယ့် file copyပေါင်းသောင်းခြောက်ထောင် Storage Space ဖောင်းပွပြီး အဆင်ပြေတဲ့ solution တော့ မဖြစ်နေပါဘူး။📄🗂️💽

–နောက်တစ်ခု က Project တစ်ခု ကို အပိုင်းလိုက်ခွဲထုတ်ပြီး သက်ဆိုင်ရာ အပိုင်းအလိုက် Developer တွေက ရေးပြီး Project တစ်ခုလုံးအဖြစ် ပြန်ပေါင်းတဲ့ အချိန်မှာလည်း file conflit ဖြစ်တာမျိုးတွေ Developer တစ်ယောက်ပြီးမှ တစ်ယောက် စောင့်ပြီးအလုပ်လုပ်ရတာမျိုးတွေ အများကြီးဖြစ်နိုင်ပါတယ်。⚔️⌛

ဒါကြောင့် ကျွန်တော်တို့ Git ကို အသုံးပြုဖို့ လိုတာဖြစ်ပါတယ်။💡✅


တကယ်လို့ Git သုံးပြီး ရေးကြည့်မယ်ဆိုရင်ရော !!💪💻

–Developer တိုင်းဟာ source code မှာ အပြောင်းအလဲဖြစ်သမျှ(ဘယ် Timeline မှာတော့ ဘာတွေရေးခဲ့ဖူးလဲ၊ ဘာတွေပြင်ခဲ့လဲ၊ ဘာတွေဖျက်ခဲ့လဲ) ကို track လုပ်လို့ရလာမယ်。🔍📘

–တစ်ယောက်ကိုတစ်ယောက်စောင့်စရာမလိုဘဲ တစ်ချိန်တည်းမှာဘဲ project ရဲ့ မတူညီတဲ့ အစိတ်အပိုင်းအလိုက်၊ version အလိုက် Branch တွေခွဲပြီး အလုပ်လုပ်လို့ရလာမယ်။🌿🔀

–Git က Developer တစ်ယောက်စီတိုင်းအတွက် project copy file (Clone) တွေတစ်ခုစီဖန်တီး ပြီးတော့ ပြောင်းလဲ ပြင်ဆင် တာတွေကို commit မှာ log file လိုမျိုး track လုပ်ထားတယ်။ Code Stable ဖြစ်ပြီး Project ကိုပြန်ပေါင်းတဲ့အချိန်မှာလည်း Git က (merge)စနစ်တကျပြန်လည်ပေါင်းစပ်ပေးနိုင်ပါတယ်。🧩📜

–လိုချင်တဲ့ version ကို အချိန်မရွေးပြောင်းလို့ရအောင် git က source code တွေကိုလည်း သိမ်းထားပေးပါတယ်။⏳🗄️

–+-+-+–+-+-+–+-+-+–+-+-+–+-+-+–+-+-+–+-+-+–+-+-+

Git ကို အသုံးပြုမယ်ဆိုရင် အောက်က အသုံးများတဲ့ keyword တွေကို မဖြစ်မနေ သိထားဖို့လိုပါတယ်။📝🚀

Repository - Projectတွေရဲ့ ဘယ်အချိန်မှာ ဘာဖြစ်သွားလဲဆိုတဲ့ version history နဲ့ Project file တွေကိုသိမ်းဆည်းတဲ့နေရာဖြစ်ပါတယ်。📚🏠

Clone - ကိုယ့်ရဲ့ local စက်ထဲကို cloud ပေါ်ကဘဲဖြစ်ဖြစ်၊ တစ်ခြားတစ်ယောက်ဆီကဖြစ်ဖြစ် repo( project file) ကို ပွားယူတာဖြစ်ပါတယ်။ Download ဆွဲတဲ့ ပုံစံမျိုးပါဘဲ။📥🧲

Branch - Project ရဲ့ မတူညီတဲ့ factures တွေ testing တွေ ကို Developer အများအပြားဟာ Main Code ကို မထိခိုက်စေဘဲ လွတ်လွတ်လပ်လပ်ရေးသားလို့ရအောင် Repo တစ်ခုကနေ branch တွေအများကြီးခွဲထုတ်လို့ရပါတယ်။🌱🌴

Branch တွေခွဲရတဲ့ အဓိက ရည်ရွယ်ချက်ကတော့ Main Code ကို မထိခိုက်ဘဲ လွတ်လွတ်လပ်လပ် features အသစ်တွေ testing လုပ်လို့ရအောင်၊ team ထဲက Developer အချင်းချင်း ကိုယ့်အဖွဲ့နဲ့ကိုယ် ချိတ်ဆတ် အလုပ်လုပ်ဖို့လွယ်အောင် လုပ်ရတာဘဲဖြစ်ပါတယ်။🧠🔗👨‍💻

Commit - Repo မှာ အပြောင်းအလဲလုပ်လိုက်တာတွေကို History ထဲမှာ မှတ်ချက်တစ်ခု checkpoint တစ်ခု အနေနဲ့ကျန်အောင် local မှာ သိမ်းတာဖြစ်ပါတယ်။ commit လုပ်မယ်ဆိုရင် မဖြစ်မနေ ကိုယ်ပြောင်းလဲခဲ့တဲ့ Description ဖော်ပြချက်ကို ရေးထားဖို့လိုပါတယ်။ commit တွေကို hilight ဖြစ်အောင် tag လုပ်လို့လည်းရပါတယ်။📌🗒️

Push - ကျွန်တော်တို့ local မှာ commit လုပ်ပြီး ပြောင်းလဲထားတာကို repo ပေါ်မှာ ပြန်တင်ပေးတာဖြစ်ပါတယ်။ Push လုပ်မယ်ဆိုရင် local branch နဲ့ push လုပ်ချင်တဲ့ repo ရဲ့ Branch တော့ တူညီဖို့လိုပါတယ်။📤🔄

Pull - Pull ဆိုတာကတော့ remote repo မှာ changes လုပ်ထားတွေက local မှာ update ဖြစ်အောင် ဆွဲယူတာဘဲဖြစ်ပါတယ်။ ဉပမာ တစ်ခြား Developer တစ်ယောက်က update ရေးထားတဲ့ features, code တွေကို repo ပေါ်ကို Push လိုက်တယ်ဆို ရင် ကျွန်တော်တို့ဆီမှာလည်း update ဖြစ်အောင် Pull လုပ်တာဖြစ်ပါတယ်။📬🔁

Git System ထဲမှာ မှ Github ကတော့ လူအသုံးအများဆုံး Service ဘဲဖြစ်ပါတယ်။🌐⭐

📁 Repository
📥 Clone
🌿 Branch
📬 Pull
📌 Commit
📤 Push
📡 Fetch
